import * as React from "react";
import { Frame, addPropertyControls, ControlType } from "framer";
import { useState, createElement } from "react";
import { placeholderState } from "./placeholderState";

export function PageWithControls({ children, debugOn, ...rest }) {
  const [currentPage, setCurrentPage] = useState(0);
  let targetPage = children[0];
  let targechildrens,
    page,
    pageLength,
    pageNextButton,
    pagePrevButton,
    newPage,
    newPagePrevButton,
    newPageNextButton;
  if (targetPage) {
    targechildrens = targetPage.props.children;
    page = findValueByKey(targechildrens, "TargetPage");
    // if not connected to anything, show placeholder
    if (!page) {
      return createElement(placeholderState, {
        title: "No TargetPage",
        label: "Change Page Component name to TargetPage on the Canvas",
        error: true,
      });
    }
    pageLength =
      (page.props.children.props &&
        page.props.children.props.children.length) ||
      (page.props.children[0] && page.props.children[0].props.children.length); // handle Web Export from Framer X

    // page.props.children && page.props.children.props.children.length;
    pagePrevButton = findValueByKey(targechildrens, "PagePrev");
    pageNextButton = findValueByKey(targechildrens, "PageNext");
    if (!pagePrevButton || !pageNextButton) {
      return createElement(placeholderState, {
        title: "No PagePrev/PageNext",
        label: "Change Button Frame name to PagePrev/PageNext on the Canvas",
        error: true,
      });
    }
    newPage = React.cloneElement(page, {
      currentPage,
    });
    newPagePrevButton = React.cloneElement(pagePrevButton, {
      onClick: () => {
        console.log("page Prev!");
        setCurrentPage(currentPage - 1);
      },
    });
    newPageNextButton = React.cloneElement(pageNextButton, {
      onClick: () => {
        console.log("page Next!");
        setCurrentPage(currentPage + 1);
        if (currentPage >= pageLength - 1) setCurrentPage(0);
      },
    });
  }
  // if not connected to anything, show placeholder
  if (!targetPage) {
    return createElement(placeholderState, {
      title: "No page",
      label: "Add page with controls by connecting them on the Canvas",
    });
  }

  return (
    <Frame size="100%" background="">
      {debugOn && (
        <Frame
          width=""
          height=""
          style={{
            fontSize: 50,
            background: "green",
            padding: 5,
            zIndex: 999,
          }}
        >
          {currentPage}
        </Frame>
      )}
      {!targetPage && "Add Target Contents"}

      {newPage}
      {newPagePrevButton}
      {newPageNextButton}
    </Frame>
  );
}

PageWithControls.defaultProps = {
  debugOn: false,
};

addPropertyControls(PageWithControls, {
  children: {
    type: ControlType.ComponentInstance,
  },
  debugOn: {
    type: ControlType.Boolean,
  },
});

function findValueByKey(arr, key) {
  for (let i = 0; i < arr.length; i++) {
    const element = arr[i];
    if (element.props.name === key) return element;
  }
}

// recursive function to get nested things (WIP)
// function findValueByKey(arr, key) {
//   let nestedResult;
//   for (let i = 0; i < arr.length; i++) {
//     const element = arr[i];
//     if (element.props.name === key) {
//       return element;
//     } else nestedResult = findValueByKey(element.props.children, key);
//   }
//   return nestedResult;
// }
